Skip to content
Search or jump toâ€¦
Pull requests
Issues
Codespaces
Marketplace
Explore
 
@udaynath1171 
udaynath1171
/
Sentiment-Analysis
Public
Cannot fork because you own this repository and are not a member of any organizations.
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
Sentiment-Analysis/.github/workflows/python-package.yml
@udaynath1171
udaynath1171 Update python-package.yml
Latest commit 64f7d54 5 minutes ago
 History
 1 contributor
47 lines (41 sloc)  1.69 KB
 

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest fastapi nltk uvicorn psycopg2-binary requests httpx
        python3 -m nltk.downloader vader_lexicon
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build the Docker images
      run: |
       docker build -t test-frontend ./web
       docker run -dp 1172:1172 --name frontend-test-container-1 test-frontend   
    - name: Test with pytest
      run: docker exec frontend-test-container-1 sh -c 'pytest test_frontend.py'


